/*by mu6k, Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.*/

//#define noise_sampling
#define quality 40


vec4 material(vec2 uv)
{
	float t = iGlobalTime;
	uv += texture2D(iChannel1,uv*sin(t*.001)*.1).xy*.02;
	uv += texture2D(iChannel1,uv*sin(t*.001)*.02).xy*.1;

	float q = texture2D(iChannel0,uv*.2).y;
	
	q-=.5+sin(t+sin(uv.x)+sin(uv.y))*.6; q*=2.0;q=abs(q);
	q=1.0/(q*16.0+1.0);
	//return vec4(q);
	//vec4 c = texture2D(iChannel0,uv*.7)
		//*texture2D(iChannel0,uv*.4)
		//*texture2D(iChannel0,uv*.1);
	vec4 c=vec4(q)*texture2D(iChannel0,uv*.1);
		
	return c*texture2D(iChannel1,uv*.001);
	
}

#define inv_quality (1.0/float(quality))


float hash(vec2 x)
{
	return fract(cos(dot(x.xy,vec2(2.31,53.21))*124.123)*412.0); 
}

float hash(float x)
{
	return fract(sin(x*.0127863)*17143.321); //decent hash for noise generation
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	vec2 uv = fragCoord.xy / iResolution.xy -.5;
	uv.x*= iResolution.x /iResolution.y;
	
	vec3 color = vec3(0);
	
	float t2 = iGlobalTime;
	t2 = cos(t2*.3)*cos(t2*.1)*cos(t2*0.7)*2.0;
	
	for (float i = .0; i<1.0; i+= inv_quality)
	{
		float t = t2;
		#ifdef noise_sampling
		float fi = hash(uv*.0005+vec2(i,t));
		#else
		float fi = i;
		#endif
		fi=fi*fi;
		vec2 uv2 = uv * mat2(sin(t),cos(t),-cos(t),sin(t))*2.0;
		 uv2 = uv2*(fi*.15+.5);
		uv2.x+=iGlobalTime;
		color+=material(uv2).xyz*inv_quality*3.5;
		
	}
	
	color -= vec3(length(uv*.1));
	color += hash(uv)*.01;
	color = mix(color,vec3(length(color)),length(color)-.5);

	
	fragColor = vec4(color,1.0);
}